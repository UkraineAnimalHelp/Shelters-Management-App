// Mocks generated by Mockito 5.4.4 from annotations
// in uah_shelters/test/mocks/hive_service.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:hive/hive.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:uah_shelters/src/utils/db/hive.dart' as _i4;
import 'package:uah_shelters/src/utils/db/interface.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBox_0<E> extends _i1.SmartFake implements _i2.Box<E> {
  _FakeBox_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBatchResult_1 extends _i1.SmartFake implements _i3.BatchResult {
  _FakeBatchResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HiveService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveService extends _i1.Mock implements _i4.HiveService {
  @override
  _i2.Box<dynamic> openBox(
    String? name, [
    int? size = 25,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #openBox,
          [
            name,
            size,
          ],
        ),
        returnValue: _FakeBox_0<dynamic>(
          this,
          Invocation.method(
            #openBox,
            [
              name,
              size,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeBox_0<dynamic>(
          this,
          Invocation.method(
            #openBox,
            [
              name,
              size,
            ],
          ),
        ),
      ) as _i2.Box<dynamic>);

  @override
  _i5.Future<dynamic> readDoc(
    String? collection,
    String? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readDoc,
          [
            collection,
            key,
          ],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<_i3.BatchResult> readDocs(
    String? collection,
    dynamic from,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readDocs,
          [
            collection,
            from,
            limit,
          ],
        ),
        returnValue: _i5.Future<_i3.BatchResult>.value(_FakeBatchResult_1(
          this,
          Invocation.method(
            #readDocs,
            [
              collection,
              from,
              limit,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.BatchResult>.value(_FakeBatchResult_1(
          this,
          Invocation.method(
            #readDocs,
            [
              collection,
              from,
              limit,
            ],
          ),
        )),
      ) as _i5.Future<_i3.BatchResult>);

  @override
  _i5.Future<void> addDoc(
    String? collection,
    String? key,
    dynamic data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDoc,
          [
            collection,
            key,
            data,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateDoc(
    String? collection,
    String? key,
    dynamic data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDoc,
          [
            collection,
            key,
            data,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteDocs(
    String? collection,
    List<String>? keys,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDocs,
          [
            collection,
            keys,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<dynamic> readSubDoc(
    String? collection,
    String? subcollection,
    String? key,
    String? subKey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readSubDoc,
          [
            collection,
            subcollection,
            key,
            subKey,
          ],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<_i3.BatchResult> readSubDocs(
    String? collection,
    String? subcollection,
    String? key,
    dynamic from,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readSubDocs,
          [
            collection,
            subcollection,
            key,
            from,
            limit,
          ],
        ),
        returnValue: _i5.Future<_i3.BatchResult>.value(_FakeBatchResult_1(
          this,
          Invocation.method(
            #readSubDocs,
            [
              collection,
              subcollection,
              key,
              from,
              limit,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.BatchResult>.value(_FakeBatchResult_1(
          this,
          Invocation.method(
            #readSubDocs,
            [
              collection,
              subcollection,
              key,
              from,
              limit,
            ],
          ),
        )),
      ) as _i5.Future<_i3.BatchResult>);

  @override
  _i5.Future<void> addSubDoc(
    String? collection,
    String? subcollection,
    String? key,
    String? subKey,
    dynamic data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSubDoc,
          [
            collection,
            subcollection,
            key,
            subKey,
            data,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateSubDoc(
    String? collection,
    String? subcollection,
    String? key,
    String? subKey,
    dynamic data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSubDoc,
          [
            collection,
            subcollection,
            key,
            subKey,
            data,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteSubDocs(
    String? collection,
    String? subcollection,
    String? key,
    List<String>? keys,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteSubDocs,
          [
            collection,
            subcollection,
            key,
            keys,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveBox extends _i1.Mock implements _i2.Box<dynamic> {
  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<String> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  T read<T>(T Function()? callback) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [callback],
        ),
        returnValue: _i6.dummyValue<T>(
          this,
          Invocation.method(
            #read,
            [callback],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<T>(
          this,
          Invocation.method(
            #read,
            [callback],
          ),
        ),
      ) as T);

  @override
  T write<T>(T Function()? callback) => (super.noSuchMethod(
        Invocation.method(
          #write,
          [callback],
        ),
        returnValue: _i6.dummyValue<T>(
          this,
          Invocation.method(
            #write,
            [callback],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<T>(
          this,
          Invocation.method(
            #write,
            [callback],
          ),
        ),
      ) as T);

  @override
  String? keyAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #keyAt,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  dynamic get(
    String? key, {
    dynamic defaultValue,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
          {#defaultValue: defaultValue},
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic getAt(int? index) => super.noSuchMethod(
        Invocation.method(
          #getAt,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic operator [](Object? key) => super.noSuchMethod(
        Invocation.method(
          #[],
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<dynamic> getAll(Iterable<String>? keys) => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [keys],
        ),
        returnValue: <dynamic>[],
        returnValueForMissingStub: <dynamic>[],
      ) as List<dynamic>);

  @override
  List<dynamic> getRange(
    int? start,
    int? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRange,
          [
            start,
            end,
          ],
        ),
        returnValue: <dynamic>[],
        returnValueForMissingStub: <dynamic>[],
      ) as List<dynamic>);

  @override
  List<dynamic> getBetween({
    String? startKey,
    String? endKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBetween,
          [],
          {
            #startKey: startKey,
            #endKey: endKey,
          },
        ),
        returnValue: <dynamic>[],
        returnValueForMissingStub: <dynamic>[],
      ) as List<dynamic>);

  @override
  void put(
    String? key,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void putAt(
    int? index,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #putAt,
          [
            index,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void operator []=(
    Object? key,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #[]=,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void putAll(Map<String, dynamic>? entries) => super.noSuchMethod(
        Invocation.method(
          #putAll,
          [entries],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void putRange(
    int? start,
    int? end,
    Iterable<dynamic>? values,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #putRange,
          [
            start,
            end,
            values,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void add(dynamic value) => super.noSuchMethod(
        Invocation.method(
          #add,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addAll(Iterable<dynamic>? values) => super.noSuchMethod(
        Invocation.method(
          #addAll,
          [values],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void deleteAt(int? index) => super.noSuchMethod(
        Invocation.method(
          #deleteAt,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int deleteAll(Iterable<String>? keys) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [keys],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void deleteRange(
    int? start,
    int? end,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #deleteRange,
          [
            start,
            end,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear({bool? notify = true}) => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deleteFromDisk() => super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Stream<dynamic> watchKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #watchKey,
          [key],
        ),
        returnValue: _i5.Stream<dynamic>.empty(),
        returnValueForMissingStub: _i5.Stream<dynamic>.empty(),
      ) as _i5.Stream<dynamic>);

  @override
  _i5.Stream<void> watch() => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
        ),
        returnValue: _i5.Stream<void>.empty(),
        returnValueForMissingStub: _i5.Stream<void>.empty(),
      ) as _i5.Stream<void>);
}
