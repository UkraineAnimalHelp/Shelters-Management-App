// Mocks generated by Mockito 5.4.4 from annotations
// in uah_shelters/test/mocks/db_storage.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:uah_shelters/src/services/db/interface.dart' as _i2;

import 'db_storage.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBatchResult_0 extends _i1.SmartFake implements _i2.BatchResult {
  _FakeBatchResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DBStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockDBStorage extends _i1.Mock implements _i3.DBStorage {
  @override
  _i4.Future<dynamic> readDoc(
    String? collection,
    String? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readDoc,
          [
            collection,
            key,
          ],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<_i2.BatchResult> readDocs(
    String? collection,
    dynamic from,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readDocs,
          [
            collection,
            from,
            limit,
          ],
        ),
        returnValue: _i4.Future<_i2.BatchResult>.value(_FakeBatchResult_0(
          this,
          Invocation.method(
            #readDocs,
            [
              collection,
              from,
              limit,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.BatchResult>.value(_FakeBatchResult_0(
          this,
          Invocation.method(
            #readDocs,
            [
              collection,
              from,
              limit,
            ],
          ),
        )),
      ) as _i4.Future<_i2.BatchResult>);

  @override
  _i4.Future<void> addDoc(
    String? collection,
    String? key,
    dynamic data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDoc,
          [
            collection,
            key,
            data,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateDoc(
    String? collection,
    String? key,
    dynamic data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDoc,
          [
            collection,
            key,
            data,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDocs(
    String? collection,
    List<String>? keys,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDocs,
          [
            collection,
            keys,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<dynamic> readSubDoc(
    String? collection,
    String? subcollection,
    String? key,
    String? subKey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readSubDoc,
          [
            collection,
            subcollection,
            key,
            subKey,
          ],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<_i2.BatchResult> readSubDocs(
    String? collection,
    String? subcollection,
    String? key,
    dynamic from,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readSubDocs,
          [
            collection,
            subcollection,
            key,
            from,
            limit,
          ],
        ),
        returnValue: _i4.Future<_i2.BatchResult>.value(_FakeBatchResult_0(
          this,
          Invocation.method(
            #readSubDocs,
            [
              collection,
              subcollection,
              key,
              from,
              limit,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.BatchResult>.value(_FakeBatchResult_0(
          this,
          Invocation.method(
            #readSubDocs,
            [
              collection,
              subcollection,
              key,
              from,
              limit,
            ],
          ),
        )),
      ) as _i4.Future<_i2.BatchResult>);

  @override
  _i4.Future<void> addSubDoc(
    String? collection,
    String? subcollection,
    String? key,
    String? subKey,
    dynamic data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSubDoc,
          [
            collection,
            subcollection,
            key,
            subKey,
            data,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateSubDoc(
    String? collection,
    String? subcollection,
    String? key,
    String? subKey,
    dynamic data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSubDoc,
          [
            collection,
            subcollection,
            key,
            subKey,
            data,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteSubDocs(
    String? collection,
    String? subcollection,
    String? key,
    List<String>? keys,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteSubDocs,
          [
            collection,
            subcollection,
            key,
            keys,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
